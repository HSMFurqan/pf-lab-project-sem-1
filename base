#include <stdio.h>
#include <conio.h> 
#include <stdlib.h>
#include <time.h> 

#define MAZE_WIDTH 30
#define MAZE_HEIGHT 15


static char maze[MAZE_HEIGHT][MAZE_WIDTH];


int playerX = 1, playerY = 1;

//make the maze
void initializeMaze() {
    
    int i=0,j=0;
	for ( i = 0; i < MAZE_HEIGHT; i++) {
        for ( j = 0; j < MAZE_WIDTH; j++) {
            if (i == 0 || i == MAZE_HEIGHT - 1) {
                
                if (j == 0 || j == MAZE_WIDTH - 1) {
                    maze[i][j] = '+'; 
                } else {
                    maze[i][j] = '-';
                }
            } else if (j == 0 || j == MAZE_WIDTH - 1) {
                maze[i][j] = '|'; 
            } else {
                maze[i][j] = ' '; 
            }
        }
    }

    
    maze[MAZE_HEIGHT - 2][MAZE_WIDTH - 2] = 'E'; //exit
    maze[playerX][playerY] = 'P'; //player

    //random location of obstacles (#)
    for (int i = 1; i < MAZE_HEIGHT - 1; i++) {
        for (int j = 1; j < MAZE_WIDTH - 1; j++) {
            if (maze[i][j] == ' ' && rand() % 10 == 0) {
                maze[i][j] = '#';
            }
        }
    }
}

// display
void displayMaze() {
    system("cls"); 
    for (int i = 0; i < MAZE_HEIGHT; i++) {
        for (int j = 0; j < MAZE_WIDTH; j++) {
            if (i == playerX && j == playerY) {
                printf("P ");
            } else {
                printf("%c ", maze[i][j]);
            }
        }
        printf("\n");
    }
}

// key input
void movePlayer(char direction) {
    int newX = playerX;
    int newY = playerY;

    switch (direction) {
        case 'W':
        case 'w':
            newX--;
            break;
        case 'A': 
        case 'a':
            newY--;
            break;
        case 'S':
        case 's':
            newX++;
            break;
        case 'D':
        case 'd':
            newY++;
            break;
        default:
            return;
    }

    //out of bounds check
    if (maze[newX][newY] != '#' && maze[newX][newY] != '|' && maze[newX][newY] != '-') {
        playerX = newX;
        playerY = newY;
    }
    if(maze[newX][newY]!=maze[1][1]){
        maze[1][1]=' ';
    }
}

// self explanatory function
int checkWin() {
    if (maze[playerX][playerY] == 'E') {
        return 1;
    }
    return 0;
}



int main() {
    char input;
    time_t startTime, currentTime;
    double elapsedTime;

    
    srand(time(NULL)); // random number generation seed
    initializeMaze();
    time(&startTime);

    displayMaze();

    while (1) {
        
        if (checkWin()) {
            time(&currentTime); 
            elapsedTime = difftime(currentTime, startTime); // Calculate elapsed time
            printf("Congratulations! You reached the exit in %.0f seconds!\n", elapsedTime);
            break;
        }

        //timer display
        time(&currentTime);
        elapsedTime = difftime(currentTime, startTime);
        printf("Time: %.0f seconds\n", elapsedTime);

        printf("Use W, A, S, D to move (Q to quit): ");
        input = _getch();
        if (input == 'Q' || input == 'q') {
            printf("You quit the game.\n");
            break;
        }
        movePlayer(input);
        displayMaze();
    }

    return 0;
}
